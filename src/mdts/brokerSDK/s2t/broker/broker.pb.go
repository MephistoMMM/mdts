// Code generated by protoc-gen-go. DO NOT EDIT.
// source: broker.proto

/*
Package broker is a generated protocol buffer package.

It is generated from these files:
	broker.proto

It has these top-level messages:
*/
package broker

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import brokermsg "."

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for S2TBroker service

type S2TBrokerClient interface {
	// Request: service -> dts -> broker -> dts -> third
	TransforDataToThird(ctx context.Context, in *brokermsg.ParamToThird, opts ...grpc.CallOption) (*brokermsg.ResultToThird, error)
	// Response: service <- dts <- broker <- dts <- third
	TransforDataFromThird(ctx context.Context, in *brokermsg.ParamFromThird, opts ...grpc.CallOption) (*brokermsg.ResultFromThird, error)
}

type s2TBrokerClient struct {
	cc *grpc.ClientConn
}

func NewS2TBrokerClient(cc *grpc.ClientConn) S2TBrokerClient {
	return &s2TBrokerClient{cc}
}

func (c *s2TBrokerClient) TransforDataToThird(ctx context.Context, in *brokermsg.ParamToThird, opts ...grpc.CallOption) (*brokermsg.ResultToThird, error) {
	out := new(brokermsg.ResultToThird)
	err := grpc.Invoke(ctx, "/broker.S2TBroker/TransforDataToThird", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s2TBrokerClient) TransforDataFromThird(ctx context.Context, in *brokermsg.ParamFromThird, opts ...grpc.CallOption) (*brokermsg.ResultFromThird, error) {
	out := new(brokermsg.ResultFromThird)
	err := grpc.Invoke(ctx, "/broker.S2TBroker/TransforDataFromThird", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for S2TBroker service

type S2TBrokerServer interface {
	// Request: service -> dts -> broker -> dts -> third
	TransforDataToThird(context.Context, *brokermsg.ParamToThird) (*brokermsg.ResultToThird, error)
	// Response: service <- dts <- broker <- dts <- third
	TransforDataFromThird(context.Context, *brokermsg.ParamFromThird) (*brokermsg.ResultFromThird, error)
}

func RegisterS2TBrokerServer(s *grpc.Server, srv S2TBrokerServer) {
	s.RegisterService(&_S2TBroker_serviceDesc, srv)
}

func _S2TBroker_TransforDataToThird_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(brokermsg.ParamToThird)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S2TBrokerServer).TransforDataToThird(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.S2TBroker/TransforDataToThird",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S2TBrokerServer).TransforDataToThird(ctx, req.(*brokermsg.ParamToThird))
	}
	return interceptor(ctx, in, info, handler)
}

func _S2TBroker_TransforDataFromThird_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(brokermsg.ParamFromThird)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S2TBrokerServer).TransforDataFromThird(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.S2TBroker/TransforDataFromThird",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S2TBrokerServer).TransforDataFromThird(ctx, req.(*brokermsg.ParamFromThird))
	}
	return interceptor(ctx, in, info, handler)
}

var _S2TBroker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "broker.S2TBroker",
	HandlerType: (*S2TBrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransforDataToThird",
			Handler:    _S2TBroker_TransforDataToThird_Handler,
		},
		{
			MethodName: "TransforDataFromThird",
			Handler:    _S2TBroker_TransforDataFromThird_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "broker.proto",
}

func init() { proto.RegisterFile("broker.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 141 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0x2a, 0xca, 0xcf,
	0x4e, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0xa4, 0xf8, 0x21, 0x74,
	0x6e, 0x71, 0x3a, 0x44, 0xc2, 0x68, 0x25, 0x23, 0x17, 0x67, 0xb0, 0x51, 0x88, 0x13, 0x58, 0x58,
	0xc8, 0x8b, 0x4b, 0x38, 0xa4, 0x28, 0x31, 0xaf, 0x38, 0x2d, 0xbf, 0xc8, 0x25, 0xb1, 0x24, 0x31,
	0x24, 0x3f, 0x24, 0x23, 0xb3, 0x28, 0x45, 0x48, 0x5c, 0x0f, 0xa1, 0x2d, 0x20, 0xb1, 0x28, 0x31,
	0x17, 0x2a, 0x21, 0x25, 0x81, 0x24, 0x11, 0x94, 0x5a, 0x5c, 0x9a, 0x53, 0x02, 0x95, 0x51, 0x62,
	0x10, 0x0a, 0xe0, 0x12, 0x45, 0x36, 0xcb, 0xad, 0x28, 0x3f, 0x17, 0x62, 0x9a, 0x24, 0xba, 0x69,
	0x70, 0x29, 0x29, 0x29, 0x0c, 0xf3, 0xe0, 0x72, 0x4a, 0x0c, 0x49, 0x6c, 0x60, 0x27, 0x1b, 0x03,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x91, 0x68, 0xa8, 0xfb, 0xdb, 0x00, 0x00, 0x00,
}
