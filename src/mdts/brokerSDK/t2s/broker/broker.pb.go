// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mdts/brokerSDK/t2s/broker/broker.proto

/*
Package broker is a generated protocol buffer package.

It is generated from these files:
	mdts/brokerSDK/t2s/broker/broker.proto

It has these top-level messages:
*/
package broker

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import brokermsg "mdts/protocols/brokermsg"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for T2SBroker service

type T2SBrokerClient interface {
	// Request: service -> dts -> broker -> dts -> third
	TransforDataToService(ctx context.Context, in *brokermsg.ParamToService, opts ...grpc.CallOption) (*brokermsg.ResultToService, error)
	// Response: service <- dts <- broker <- dts <- third
	TransforDataFromService(ctx context.Context, in *brokermsg.ParamFromService, opts ...grpc.CallOption) (*brokermsg.ResultFromService, error)
}

type t2SBrokerClient struct {
	cc *grpc.ClientConn
}

func NewT2SBrokerClient(cc *grpc.ClientConn) T2SBrokerClient {
	return &t2SBrokerClient{cc}
}

func (c *t2SBrokerClient) TransforDataToService(ctx context.Context, in *brokermsg.ParamToService, opts ...grpc.CallOption) (*brokermsg.ResultToService, error) {
	out := new(brokermsg.ResultToService)
	err := grpc.Invoke(ctx, "/broker.T2SBroker/TransforDataToService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *t2SBrokerClient) TransforDataFromService(ctx context.Context, in *brokermsg.ParamFromService, opts ...grpc.CallOption) (*brokermsg.ResultFromService, error) {
	out := new(brokermsg.ResultFromService)
	err := grpc.Invoke(ctx, "/broker.T2SBroker/TransforDataFromService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for T2SBroker service

type T2SBrokerServer interface {
	// Request: service -> dts -> broker -> dts -> third
	TransforDataToService(context.Context, *brokermsg.ParamToService) (*brokermsg.ResultToService, error)
	// Response: service <- dts <- broker <- dts <- third
	TransforDataFromService(context.Context, *brokermsg.ParamFromService) (*brokermsg.ResultFromService, error)
}

func RegisterT2SBrokerServer(s *grpc.Server, srv T2SBrokerServer) {
	s.RegisterService(&_T2SBroker_serviceDesc, srv)
}

func _T2SBroker_TransforDataToService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(brokermsg.ParamToService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(T2SBrokerServer).TransforDataToService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.T2SBroker/TransforDataToService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(T2SBrokerServer).TransforDataToService(ctx, req.(*brokermsg.ParamToService))
	}
	return interceptor(ctx, in, info, handler)
}

func _T2SBroker_TransforDataFromService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(brokermsg.ParamFromService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(T2SBrokerServer).TransforDataFromService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.T2SBroker/TransforDataFromService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(T2SBrokerServer).TransforDataFromService(ctx, req.(*brokermsg.ParamFromService))
	}
	return interceptor(ctx, in, info, handler)
}

var _T2SBroker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "broker.T2SBroker",
	HandlerType: (*T2SBrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransforDataToService",
			Handler:    _T2SBroker_TransforDataToService_Handler,
		},
		{
			MethodName: "TransforDataFromService",
			Handler:    _T2SBroker_TransforDataFromService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mdts/brokerSDK/t2s/broker/broker.proto",
}

func init() { proto.RegisterFile("mdts/brokerSDK/t2s/broker/broker.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 167 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xcb, 0x4d, 0x29, 0x29,
	0xd6, 0x4f, 0x2a, 0xca, 0xcf, 0x4e, 0x2d, 0x0a, 0x76, 0xf1, 0xd6, 0x2f, 0x31, 0x82, 0xf1, 0xa0,
	0x94, 0x5e, 0x41, 0x51, 0x7e, 0x49, 0xbe, 0x10, 0x1b, 0x84, 0x27, 0xa5, 0x01, 0x56, 0x0f, 0x16,
	0x4b, 0xce, 0xcf, 0x81, 0xa9, 0xcd, 0x2d, 0x4e, 0x47, 0xb0, 0x20, 0x3a, 0x8c, 0xb6, 0x32, 0x72,
	0x71, 0x86, 0x18, 0x05, 0x3b, 0x81, 0x85, 0x85, 0x02, 0xb8, 0x44, 0x43, 0x8a, 0x12, 0xf3, 0x8a,
	0xd3, 0xf2, 0x8b, 0x5c, 0x12, 0x4b, 0x12, 0x43, 0xf2, 0x83, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53,
	0x85, 0x24, 0xf5, 0x10, 0x1a, 0x03, 0x12, 0x8b, 0x12, 0x73, 0xe1, 0x52, 0x52, 0x52, 0x48, 0x52,
	0x41, 0xa9, 0xc5, 0xa5, 0x39, 0x25, 0x70, 0x39, 0x25, 0x06, 0xa1, 0x30, 0x2e, 0x71, 0x64, 0x13,
	0xdd, 0x8a, 0xf2, 0x73, 0x61, 0x66, 0x4a, 0xa3, 0x9b, 0x89, 0x24, 0x29, 0x25, 0x83, 0x61, 0x2a,
	0x92, 0xac, 0x12, 0x43, 0x12, 0x1b, 0xd8, 0xf9, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x93,
	0xeb, 0x99, 0x3a, 0x1a, 0x01, 0x00, 0x00,
}
